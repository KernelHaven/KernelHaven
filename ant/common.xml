<?xml version="1.0" encoding="UTF-8"?>
	
<!-- Author: Adam, Sascha El-Sharkawy -->
<project name="KH_Common" xmlns:jacoco="antlib:org.jacoco.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle.ant">

	<dirname property="KH_Common.basedir" file="${ant.file.KH_Common}" />

	<loadproperties srcfile="${KH_Common.basedir}/common.properties" />
	<loadproperties srcfile="${KH_Common.basedir}/plugins.properties" />

	<path id="classpath.project">
		<pathelement location="${classes.dir}" />
		<pathelement location="${res.dir}" />
		<fileset dir="${lib.dir}" />
		<fileset dir="${dependencies.dir}" />
	</path>

	<!--
		Requires that the contents of https://projects.sse.uni-hildesheim.de/tools/ant-lib-v2.zip
		exist at <user_home>/.ant/lib
		The "build.dependencies.download" target automatically does this. 
		To execute this script from Eclipse, it is required that the jars in this folder are also added via:
		Window -> Preferences -> Ant -> Runtime -> Global Entries -> Add External JARs...
	-->
	<path id="classpath.testing">
		<pathelement location="${classes.dir}" />
		<pathelement location="${test.classes.dir}" />
		<pathelement location="${res.dir}" />
		<fileset dir="${lib.dir}" />
		<fileset dir="${dependencies.dir}" />
		
		<!-- Add test source directory, since there may be test-specifc resources -->
		<pathelement location="${test.dir}" />
		
		<!-- Loads Junit from ANT installation folder -->
		<fileset dir="${user.home.lib}">
			<include name="junit*.jar" />
			<include name="hamcrest*.jar" />
		</fileset>
	</path>

	<!-- timestamp for version file -->
	<tstamp>
		<format property="TS_FOR_VERSION_FILE" pattern="yyyy-MM-dd HH:mm:ss" locale="en,US" />
	</tstamp>
	
	<!-- git commit hash for version file -->
	<target name="git.revision">
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="log" />
			<arg value="-1" />
			<arg value="--pretty=format:%H" />
		</exec>
		<condition property="GIT_COMMIT_FOR_VERSION_FILE" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
	</target>

	<!-- Check if required jar files are available in <user_home>/.ant/lib -->
	<target name="build.dependencies.check">
		<mkdir dir="${user.home.lib}" />
		<condition property="build.dependencies.exist">
			<and>
				<resourcecount when="greater" count="0">
					<fileset dir="${user.home.lib}" includes="junit*.jar" />
				</resourcecount>
				<resourcecount when="greater" count="0">
					<fileset dir="${user.home.lib}" includes="hamcrest*.jar" />
				</resourcecount>
				<resourcecount when="greater" count="0">
					<fileset dir="${user.home.lib}" includes="jacocoant*.jar" />
				</resourcecount>
				<resourcecount when="greater" count="0">
					<fileset dir="${user.home.lib}" includes="checkstyle-8*.jar" />
				</resourcecount>
			</and>
		</condition>
	</target>

	<!-- Download build dependencies and move them to <user_home>/.ant/lib (may require that ant is restarted) -->
	<target name="build.dependencies.download" unless="${build.dependencies.exist}" depends="build.dependencies.check">
		<get src="https://projects.sse.uni-hildesheim.de/tools/ant-lib-v2.zip" dest="ant-lib.zip" />
		<mkdir dir="${user.home.lib}" />
		<unzip src="ant-lib.zip" dest="${user.home.lib}" />
		<delete file="ant-lib.zip" />
	</target>

	<target name="prepare" depends="build.dependencies.download">
		<delete dir="${build.dir}" />

		<mkdir dir="${lib.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${jar.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${dependencies.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
	</target>

	<target name="compile" depends="git.revision">
		<!-- compile java-classes -->
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes" includeantruntime="false">
			<classpath refid="classpath.project" />
		</javac>

		<!-- generate version file -->
		<echo file="${classes.dir}/version.txt" append="false">Built at ${TS_FOR_VERSION_FILE}
Commit: ${GIT_COMMIT_FOR_VERSION_FILE}
</echo>
		<!-- the empty newline here is intentional -->
	</target>

	<target name="test.compile">
		<javac destdir="${test.classes.dir}" debug="yes" includeantruntime="false">
			<src path="${test.dir}" />
			<classpath refid="classpath.testing" />
		</javac>
	</target>

	<target name="test" depends="test.compile">
		<!-- Copy testdata, otherwise they won't be found during the test execution -->
		<copy todir="${test.classes.dir}/testdata">
			<fileset dir="testdata" />
		</copy>

		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" />
		<jacoco:coverage destfile="${reports.dir}/jacoco.exec">
			<junit fork="yes" dir="${test.classes.dir}" failureProperty="test.failed">
				<classpath refid="classpath.testing" />
                <sysproperty key="java.system.class.loader" value="net.ssehub.kernel_haven.util.KernelHavenClassLoader"/>
                
				<formatter type="xml" />
				<test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
				<batchtest todir="${reports.xml.dir}" unless="testcase">
					<!-- include all Tests -->
					<fileset dir="${test.dir}">
						<include name="**/AllTests.java" />
					</fileset>

					<!-- include all resources from the src-package-folders -->
					<fileset dir="${src.dir}">
						<exclude name="**/*.java" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<!-- JUnit Report in HTML -->
		<!-- <junitreport todir="${reports.xml.dir}">
			<fileset dir="${reports.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="xml" todir="${reports.html.dir}" />
		</junitreport> -->
	</target>

	<target name="package.jar">
		<!-- only one of these targets is executed, depending whether main.class is set or not -->
		<antcall target="KH_Common.package.jar.nomainclass" />
		<antcall target="KH_Common.package.jar.withmainclass" />
	</target>

	<target name="package.jar.nomainclass" unless="main.class">
		<jar destfile="${jar.dir}/${jar.filename}" duplicate="preserve">
			<fileset dir="${classes.dir}" excludes="**/package-info.class" />
			<fileset dir="${src.dir}" excludes="**/package-info.java" />
			<fileset dir="${res.dir}" excludes="**/package-info.java" erroronmissingdir="false" />

			<!-- Automatically include all libraries from lib/include folder -->
			<zipgroupfileset dir="${lib.dir}/include" includes="*.jar" erroronmissingdir="false" />

			<fileset file="${basedir}/LICENSE" casesensitive="false" />
		</jar>
	</target>

	<target name="package.jar.withmainclass" if="main.class">
		<jar destfile="${jar.dir}/${jar.filename}" duplicate="preserve">
			<fileset dir="${classes.dir}" excludes="**/package-info.class" />
			<fileset dir="${src.dir}" excludes="**/package-info.java" />
			<fileset dir="${res.dir}" excludes="**/package-info.java" erroronmissingdir="false" />

			<!-- Automatically include all libraries from lib/include folder -->
			<zipgroupfileset dir="${lib.dir}/include" includes="*.jar" erroronmissingdir="false" />

			<manifest>
				<attribute name="Main-Class" value="${main.class}" />
				<attribute name="Class-Path" value="" />
			</manifest>

			<fileset file="${basedir}/LICENSE" casesensitive="false" />
		</jar>
	</target>

	<target name="checkstyle">
		<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" />

		<checkstyle config="${KH_Common.basedir}/checkstyle.xml" failOnViolation="false">
			<fileset dir="${src.dir}" includes="**/*.java" />
			<formatter type="plain" />
			<formatter type="xml" toFile="build/reports/xml/checkstyle_errors.xml" />
		</checkstyle>
	</target>

	<condition property="runs_in_jenkins">
		<equals arg1="${user.name}" arg2="jenkins" />
	</condition>

	<!--
		Clean-up after testing to reduce required diskspace for archiving results on Jenkins.
		Must be called after JAR creation, before creating Jacoco results (or at least before Jenkins will publish them).
	-->
	<target name="cleanup" if="runs_in_jenkins">
		<delete failonerror="false">
			<!-- Attention: Please do not commit (Jenkins won't commit anything) -->
			<fileset dir="${res.dir}">
				<include name="**/*.zip" />
				<include name="**/*.jar" />
				<include name="**/pilztaker" />
			</fileset>
		</delete>
	</target>

	<target name="test.report">
		<antcall target="KH_Common.cleanup" />

		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" />
		<jacoco:report>
			<executiondata>
				<file file="${reports.dir}/jacoco.exec" />
			</executiondata>

			<structure name="${ant.project.name}">
				<classfiles>
					<fileset dir="${classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>
		</jacoco:report>
	</target>

	<!-- Target to create folder structure for releases, requires argument: base.kh.folder -->
	<target name="release.folder.structure">
		<delete dir="${base.kh.folder}" />
		<mkdir dir="${base.kh.folder}" />
		<mkdir dir="${base.kh.folder}/plugins" />
		<mkdir dir="${base.kh.folder}/output" />
		<mkdir dir="${base.kh.folder}/res" />
		<mkdir dir="${base.kh.folder}/log" />
		<mkdir dir="${base.kh.folder}/cache" />

		<echo file="${base.kh.folder}/version.txt" append="false">Release of ${TS_FOR_VERSION_FILE}
</echo>
		<!-- the empty newline here is intentional -->
	</target>

</project>
